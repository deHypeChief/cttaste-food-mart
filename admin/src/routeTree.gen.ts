/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/_admin'
import { Route as IndexImport } from './routes/index'
import { Route as AuthResetPasswordImport } from './routes/auth/reset-password'
import { Route as AuthRegisterAdminImport } from './routes/auth/registerAdmin'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as AdminVendorsImport } from './routes/_admin/vendors'
import { Route as AdminUsersImport } from './routes/_admin/users'
import { Route as AdminSettingsImport } from './routes/_admin/settings'
import { Route as AdminOverviewImport } from './routes/_admin/overview'
import { Route as AdminSettingsIndexImport } from './routes/_admin/settings/index'
import { Route as AdminAccountIndexImport } from './routes/_admin/account/index'
import { Route as AdminSettingsPrivacyImport } from './routes/_admin/settings/privacy'
import { Route as AdminSettingsNotificationsImport } from './routes/_admin/settings/notifications'
import { Route as AdminSettingsAccountImport } from './routes/_admin/settings/account'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterAdminRoute = AuthRegisterAdminImport.update({
  id: '/auth/registerAdmin',
  path: '/auth/registerAdmin',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const AdminVendorsRoute = AdminVendorsImport.update({
  id: '/vendors',
  path: '/vendors',
  getParentRoute: () => AdminRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSettingsRoute = AdminSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)

const AdminOverviewRoute = AdminOverviewImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSettingsIndexRoute = AdminSettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminSettingsRoute,
} as any)

const AdminAccountIndexRoute = AdminAccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSettingsPrivacyRoute = AdminSettingsPrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => AdminSettingsRoute,
} as any)

const AdminSettingsNotificationsRoute = AdminSettingsNotificationsImport.update(
  {
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => AdminSettingsRoute,
  } as any,
)

const AdminSettingsAccountRoute = AdminSettingsAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AdminSettingsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_admin/overview': {
      id: '/_admin/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof AdminOverviewImport
      parentRoute: typeof AdminImport
    }
    '/_admin/settings': {
      id: '/_admin/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AdminSettingsImport
      parentRoute: typeof AdminImport
    }
    '/_admin/users': {
      id: '/_admin/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/_admin/vendors': {
      id: '/_admin/vendors'
      path: '/vendors'
      fullPath: '/vendors'
      preLoaderRoute: typeof AdminVendorsImport
      parentRoute: typeof AdminImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/registerAdmin': {
      id: '/auth/registerAdmin'
      path: '/auth/registerAdmin'
      fullPath: '/auth/registerAdmin'
      preLoaderRoute: typeof AuthRegisterAdminImport
      parentRoute: typeof rootRoute
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_admin/settings/account': {
      id: '/_admin/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AdminSettingsAccountImport
      parentRoute: typeof AdminSettingsImport
    }
    '/_admin/settings/notifications': {
      id: '/_admin/settings/notifications'
      path: '/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof AdminSettingsNotificationsImport
      parentRoute: typeof AdminSettingsImport
    }
    '/_admin/settings/privacy': {
      id: '/_admin/settings/privacy'
      path: '/privacy'
      fullPath: '/settings/privacy'
      preLoaderRoute: typeof AdminSettingsPrivacyImport
      parentRoute: typeof AdminSettingsImport
    }
    '/_admin/account/': {
      id: '/_admin/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AdminAccountIndexImport
      parentRoute: typeof AdminImport
    }
    '/_admin/settings/': {
      id: '/_admin/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AdminSettingsIndexImport
      parentRoute: typeof AdminSettingsImport
    }
  }
}

// Create and export the route tree

interface AdminSettingsRouteChildren {
  AdminSettingsAccountRoute: typeof AdminSettingsAccountRoute
  AdminSettingsNotificationsRoute: typeof AdminSettingsNotificationsRoute
  AdminSettingsPrivacyRoute: typeof AdminSettingsPrivacyRoute
  AdminSettingsIndexRoute: typeof AdminSettingsIndexRoute
}

const AdminSettingsRouteChildren: AdminSettingsRouteChildren = {
  AdminSettingsAccountRoute: AdminSettingsAccountRoute,
  AdminSettingsNotificationsRoute: AdminSettingsNotificationsRoute,
  AdminSettingsPrivacyRoute: AdminSettingsPrivacyRoute,
  AdminSettingsIndexRoute: AdminSettingsIndexRoute,
}

const AdminSettingsRouteWithChildren = AdminSettingsRoute._addFileChildren(
  AdminSettingsRouteChildren,
)

interface AdminRouteChildren {
  AdminOverviewRoute: typeof AdminOverviewRoute
  AdminSettingsRoute: typeof AdminSettingsRouteWithChildren
  AdminUsersRoute: typeof AdminUsersRoute
  AdminVendorsRoute: typeof AdminVendorsRoute
  AdminAccountIndexRoute: typeof AdminAccountIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminOverviewRoute: AdminOverviewRoute,
  AdminSettingsRoute: AdminSettingsRouteWithChildren,
  AdminUsersRoute: AdminUsersRoute,
  AdminVendorsRoute: AdminVendorsRoute,
  AdminAccountIndexRoute: AdminAccountIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AdminRouteWithChildren
  '/overview': typeof AdminOverviewRoute
  '/settings': typeof AdminSettingsRouteWithChildren
  '/users': typeof AdminUsersRoute
  '/vendors': typeof AdminVendorsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/registerAdmin': typeof AuthRegisterAdminRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/settings/account': typeof AdminSettingsAccountRoute
  '/settings/notifications': typeof AdminSettingsNotificationsRoute
  '/settings/privacy': typeof AdminSettingsPrivacyRoute
  '/account': typeof AdminAccountIndexRoute
  '/settings/': typeof AdminSettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AdminRouteWithChildren
  '/overview': typeof AdminOverviewRoute
  '/users': typeof AdminUsersRoute
  '/vendors': typeof AdminVendorsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/registerAdmin': typeof AuthRegisterAdminRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/settings/account': typeof AdminSettingsAccountRoute
  '/settings/notifications': typeof AdminSettingsNotificationsRoute
  '/settings/privacy': typeof AdminSettingsPrivacyRoute
  '/account': typeof AdminAccountIndexRoute
  '/settings': typeof AdminSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_admin/overview': typeof AdminOverviewRoute
  '/_admin/settings': typeof AdminSettingsRouteWithChildren
  '/_admin/users': typeof AdminUsersRoute
  '/_admin/vendors': typeof AdminVendorsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/registerAdmin': typeof AuthRegisterAdminRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/_admin/settings/account': typeof AdminSettingsAccountRoute
  '/_admin/settings/notifications': typeof AdminSettingsNotificationsRoute
  '/_admin/settings/privacy': typeof AdminSettingsPrivacyRoute
  '/_admin/account/': typeof AdminAccountIndexRoute
  '/_admin/settings/': typeof AdminSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/overview'
    | '/settings'
    | '/users'
    | '/vendors'
    | '/auth/forgot-password'
    | '/auth/registerAdmin'
    | '/auth/reset-password'
    | '/settings/account'
    | '/settings/notifications'
    | '/settings/privacy'
    | '/account'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/overview'
    | '/users'
    | '/vendors'
    | '/auth/forgot-password'
    | '/auth/registerAdmin'
    | '/auth/reset-password'
    | '/settings/account'
    | '/settings/notifications'
    | '/settings/privacy'
    | '/account'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_admin/overview'
    | '/_admin/settings'
    | '/_admin/users'
    | '/_admin/vendors'
    | '/auth/forgot-password'
    | '/auth/registerAdmin'
    | '/auth/reset-password'
    | '/_admin/settings/account'
    | '/_admin/settings/notifications'
    | '/_admin/settings/privacy'
    | '/_admin/account/'
    | '/_admin/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthRegisterAdminRoute: typeof AuthRegisterAdminRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthRegisterAdminRoute: AuthRegisterAdminRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin",
        "/auth/forgot-password",
        "/auth/registerAdmin",
        "/auth/reset-password"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/overview",
        "/_admin/settings",
        "/_admin/users",
        "/_admin/vendors",
        "/_admin/account/"
      ]
    },
    "/_admin/overview": {
      "filePath": "_admin/overview.tsx",
      "parent": "/_admin"
    },
    "/_admin/settings": {
      "filePath": "_admin/settings.tsx",
      "parent": "/_admin",
      "children": [
        "/_admin/settings/account",
        "/_admin/settings/notifications",
        "/_admin/settings/privacy",
        "/_admin/settings/"
      ]
    },
    "/_admin/users": {
      "filePath": "_admin/users.tsx",
      "parent": "/_admin"
    },
    "/_admin/vendors": {
      "filePath": "_admin/vendors.tsx",
      "parent": "/_admin"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/registerAdmin": {
      "filePath": "auth/registerAdmin.tsx"
    },
    "/auth/reset-password": {
      "filePath": "auth/reset-password.tsx"
    },
    "/_admin/settings/account": {
      "filePath": "_admin/settings/account.tsx",
      "parent": "/_admin/settings"
    },
    "/_admin/settings/notifications": {
      "filePath": "_admin/settings/notifications.tsx",
      "parent": "/_admin/settings"
    },
    "/_admin/settings/privacy": {
      "filePath": "_admin/settings/privacy.tsx",
      "parent": "/_admin/settings"
    },
    "/_admin/account/": {
      "filePath": "_admin/account/index.tsx",
      "parent": "/_admin"
    },
    "/_admin/settings/": {
      "filePath": "_admin/settings/index.tsx",
      "parent": "/_admin/settings"
    }
  }
}
ROUTE_MANIFEST_END */
